#!/usr/bin/env php
<?php
define('BASE_PATH', realpath(__DIR__));
require __DIR__ . '/vendor/autoload.php';

use App\Core\Config;
use App\Core\Database;
use Illuminate\Database\Migrations\Migrator;
use Illuminate\Filesystem\Filesystem;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;

Config::load();
Database::connect();

$files = new Filesystem();
$migrator = new Migrator(
    $repository = new \Illuminate\Database\Migrations\DatabaseMigrationRepository(Database::getCapsule()->getConnection(), 'migrations'),
    Database::getCapsule()->getConnection(),
    $files
);

if (!$repository->repositoryExists()) {
    $repository->createRepository();
}

$console = new Application('LunaPeak Artisan', '1.0.0');

// make:migration
$console->register('make:migration')
    ->setDefinition([
        new InputArgument('name', InputArgument::REQUIRED, 'The name of the migration'),
    ])
    ->setDescription('Create a new migration file')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($files) {
        $name = $input->getArgument('name');
        $timestamp = date('Y_m_d_His');
        $filename = "{$timestamp}_{$name}.php";
        $path = __DIR__ . '/database/migrations/' . $filename;

        $stub = <<<EOT
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('{$name}', function (Blueprint \$table) {
            \$table->id();
            \$table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('{$name}');
    }
};
EOT;

        $files->put($path, $stub);
        $output->writeln("<info>Created Migration:</info> {$filename}");
    });

// migrate
$console->register('migrate')
    ->setDescription('Run the database migrations')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($migrator) {
        $migrator->run(__DIR__ . '/database/migrations');
        foreach ($migrator->getNotes() as $note) {
            $output->writeln($note);
        }
    });

// migrate:rollback
$console->register('migrate:rollback')
    ->setDescription('Rollback the last database migration')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($migrator) {
        $migrator->rollback(__DIR__ . '/database/migrations');
        foreach ($migrator->getNotes() as $note) {
            $output->writeln($note);
        }
    });

// migrate:fresh
$console->register('migrate:fresh')
    ->setDescription('Drop all tables and re-run all migrations')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($migrator) {
        $connection = Database::getCapsule()->getConnection();
        $tables = $connection->getDoctrineSchemaManager()->listTableNames();
        foreach ($tables as $table) {
            $connection->statement("DROP TABLE {$table}");
        }
        $output->writeln('<info>Dropped all tables successfully.</info>');

        $migrator->run(__DIR__ . '/database/migrations');
        foreach ($migrator->getNotes() as $note) {
            $output->writeln($note);
        }
    });

$console->run();